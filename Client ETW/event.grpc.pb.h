// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: event.proto
#ifndef GRPC_event_2eproto__INCLUDED
#define GRPC_event_2eproto__INCLUDED

#include "event.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace eventinfo {

class EventInfo final {
 public:
  static constexpr char const* service_full_name() {
    return "eventinfo.EventInfo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::eventinfo::Process>> ProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::eventinfo::Process>>(ProcessEventRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Process>> AsyncProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Process>>(AsyncProcessEventRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Process>> PrepareAsyncProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Process>>(PrepareAsyncProcessEventRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::eventinfo::FileIO>> FileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::eventinfo::FileIO>>(FileIoEventRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::FileIO>> AsyncFileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::FileIO>>(AsyncFileIoEventRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::FileIO>> PrepareAsyncFileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::FileIO>>(PrepareAsyncFileIoEventRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::eventinfo::Registry>> RegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::eventinfo::Registry>>(RegistryEventRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Registry>> AsyncRegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Registry>>(AsyncRegistryEventRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Registry>> PrepareAsyncRegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::eventinfo::Registry>>(PrepareAsyncRegistryEventRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::ClientWriteReactor< ::eventinfo::Process>* reactor) = 0;
      virtual void FileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::ClientWriteReactor< ::eventinfo::FileIO>* reactor) = 0;
      virtual void RegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::ClientWriteReactor< ::eventinfo::Registry>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::eventinfo::Process>* ProcessEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::eventinfo::Process>* AsyncProcessEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::eventinfo::Process>* PrepareAsyncProcessEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::eventinfo::FileIO>* FileIoEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::eventinfo::FileIO>* AsyncFileIoEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::eventinfo::FileIO>* PrepareAsyncFileIoEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::eventinfo::Registry>* RegistryEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::eventinfo::Registry>* AsyncRegistryEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::eventinfo::Registry>* PrepareAsyncRegistryEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::eventinfo::Process>> ProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::eventinfo::Process>>(ProcessEventRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Process>> AsyncProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Process>>(AsyncProcessEventRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Process>> PrepareAsyncProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Process>>(PrepareAsyncProcessEventRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::eventinfo::FileIO>> FileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::eventinfo::FileIO>>(FileIoEventRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::FileIO>> AsyncFileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::FileIO>>(AsyncFileIoEventRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::FileIO>> PrepareAsyncFileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::FileIO>>(PrepareAsyncFileIoEventRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::eventinfo::Registry>> RegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::eventinfo::Registry>>(RegistryEventRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Registry>> AsyncRegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Registry>>(AsyncRegistryEventRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Registry>> PrepareAsyncRegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::eventinfo::Registry>>(PrepareAsyncRegistryEventRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ProcessEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::ClientWriteReactor< ::eventinfo::Process>* reactor) override;
      void FileIoEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::ClientWriteReactor< ::eventinfo::FileIO>* reactor) override;
      void RegistryEvent(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::ClientWriteReactor< ::eventinfo::Registry>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::eventinfo::Process>* ProcessEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) override;
    ::grpc::ClientAsyncWriter< ::eventinfo::Process>* AsyncProcessEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::eventinfo::Process>* PrepareAsyncProcessEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::eventinfo::FileIO>* FileIoEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) override;
    ::grpc::ClientAsyncWriter< ::eventinfo::FileIO>* AsyncFileIoEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::eventinfo::FileIO>* PrepareAsyncFileIoEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::eventinfo::Registry>* RegistryEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response) override;
    ::grpc::ClientAsyncWriter< ::eventinfo::Registry>* AsyncRegistryEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::eventinfo::Registry>* PrepareAsyncRegistryEventRaw(::grpc::ClientContext* context, ::eventinfo::ServerResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_FileIoEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_RegistryEvent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ProcessEvent(::grpc::ServerContext* context, ::grpc::ServerReader< ::eventinfo::Process>* reader, ::eventinfo::ServerResponse* response);
    virtual ::grpc::Status FileIoEvent(::grpc::ServerContext* context, ::grpc::ServerReader< ::eventinfo::FileIO>* reader, ::eventinfo::ServerResponse* response);
    virtual ::grpc::Status RegistryEvent(::grpc::ServerContext* context, ::grpc::ServerReader< ::eventinfo::Registry>* reader, ::eventinfo::ServerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessEvent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Process>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::eventinfo::ServerResponse, ::eventinfo::Process>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FileIoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileIoEvent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FileIoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileIoEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::FileIO>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileIoEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::eventinfo::ServerResponse, ::eventinfo::FileIO>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegistryEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegistryEvent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegistryEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistryEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Registry>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistryEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::eventinfo::ServerResponse, ::eventinfo::Registry>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessEvent<WithAsyncMethod_FileIoEvent<WithAsyncMethod_RegistryEvent<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ProcessEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessEvent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::eventinfo::Process, ::eventinfo::ServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::eventinfo::ServerResponse* response) { return this->ProcessEvent(context, response); }));
    }
    ~WithCallbackMethod_ProcessEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Process>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::eventinfo::Process>* ProcessEvent(
      ::grpc::CallbackServerContext* /*context*/, ::eventinfo::ServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FileIoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FileIoEvent() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::eventinfo::FileIO, ::eventinfo::ServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::eventinfo::ServerResponse* response) { return this->FileIoEvent(context, response); }));
    }
    ~WithCallbackMethod_FileIoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileIoEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::FileIO>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::eventinfo::FileIO>* FileIoEvent(
      ::grpc::CallbackServerContext* /*context*/, ::eventinfo::ServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegistryEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegistryEvent() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::eventinfo::Registry, ::eventinfo::ServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::eventinfo::ServerResponse* response) { return this->RegistryEvent(context, response); }));
    }
    ~WithCallbackMethod_RegistryEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistryEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Registry>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::eventinfo::Registry>* RegistryEvent(
      ::grpc::CallbackServerContext* /*context*/, ::eventinfo::ServerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ProcessEvent<WithCallbackMethod_FileIoEvent<WithCallbackMethod_RegistryEvent<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessEvent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Process>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FileIoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileIoEvent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FileIoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileIoEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::FileIO>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegistryEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegistryEvent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegistryEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistryEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Registry>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessEvent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Process>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileIoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileIoEvent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FileIoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileIoEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::FileIO>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileIoEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegistryEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegistryEvent() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegistryEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistryEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Registry>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistryEvent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessEvent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ProcessEvent(context, response); }));
    }
    ~WithRawCallbackMethod_ProcessEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Process>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ProcessEvent(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FileIoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FileIoEvent() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->FileIoEvent(context, response); }));
    }
    ~WithRawCallbackMethod_FileIoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileIoEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::FileIO>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* FileIoEvent(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegistryEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegistryEvent() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->RegistryEvent(context, response); }));
    }
    ~WithRawCallbackMethod_RegistryEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistryEvent(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::eventinfo::Registry>* /*reader*/, ::eventinfo::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* RegistryEvent(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace eventinfo


#endif  // GRPC_event_2eproto__INCLUDED
