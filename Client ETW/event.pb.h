// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_event_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_event_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_event_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_event_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_event_2eproto;
namespace eventinfo {
class FileIO;
struct FileIODefaultTypeInternal;
extern FileIODefaultTypeInternal _FileIO_default_instance_;
class Process;
struct ProcessDefaultTypeInternal;
extern ProcessDefaultTypeInternal _Process_default_instance_;
class Registry;
struct RegistryDefaultTypeInternal;
extern RegistryDefaultTypeInternal _Registry_default_instance_;
class ServerResponse;
struct ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace eventinfo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace eventinfo {

// ===================================================================


// -------------------------------------------------------------------

class ServerResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventinfo.ServerResponse) */ {
 public:
  inline ServerResponse() : ServerResponse(nullptr) {}
  ~ServerResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerResponse(::google::protobuf::internal::ConstantInitialized);

  inline ServerResponse(const ServerResponse& from)
      : ServerResponse(nullptr, from) {}
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerResponse& from) {
    ServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "eventinfo.ServerResponse";
  }
  protected:
  explicit ServerResponse(::google::protobuf::Arena* arena);
  ServerResponse(::google::protobuf::Arena* arena, const ServerResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:eventinfo.ServerResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};// -------------------------------------------------------------------

class Registry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventinfo.Registry) */ {
 public:
  inline Registry() : Registry(nullptr) {}
  ~Registry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Registry(::google::protobuf::internal::ConstantInitialized);

  inline Registry(const Registry& from)
      : Registry(nullptr, from) {}
  Registry(Registry&& from) noexcept
    : Registry() {
    *this = ::std::move(from);
  }

  inline Registry& operator=(const Registry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Registry& operator=(Registry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Registry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Registry* internal_default_instance() {
    return reinterpret_cast<const Registry*>(
               &_Registry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Registry& a, Registry& b) {
    a.Swap(&b);
  }
  inline void Swap(Registry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Registry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Registry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Registry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Registry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Registry& from) {
    Registry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Registry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "eventinfo.Registry";
  }
  protected:
  explicit Registry(::google::protobuf::Arena* arena);
  Registry(::google::protobuf::Arena* arena, const Registry& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpcodeNameFieldNumber = 2,
    kKeyNameFieldNumber = 6,
    kOpcodeFieldNumber = 1,
    kStatusFieldNumber = 4,
    kInitTimeFieldNumber = 3,
    kIndexFieldNumber = 5,
  };
  // string opcode_name = 2;
  void clear_opcode_name() ;
  const std::string& opcode_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_opcode_name(Arg_&& arg, Args_... args);
  std::string* mutable_opcode_name();
  PROTOBUF_NODISCARD std::string* release_opcode_name();
  void set_allocated_opcode_name(std::string* value);

  private:
  const std::string& _internal_opcode_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opcode_name(
      const std::string& value);
  std::string* _internal_mutable_opcode_name();

  public:
  // string key_name = 6;
  void clear_key_name() ;
  const std::string& key_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_name(Arg_&& arg, Args_... args);
  std::string* mutable_key_name();
  PROTOBUF_NODISCARD std::string* release_key_name();
  void set_allocated_key_name(std::string* value);

  private:
  const std::string& _internal_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_name(
      const std::string& value);
  std::string* _internal_mutable_key_name();

  public:
  // int32 opcode = 1;
  void clear_opcode() ;
  ::int32_t opcode() const;
  void set_opcode(::int32_t value);

  private:
  ::int32_t _internal_opcode() const;
  void _internal_set_opcode(::int32_t value);

  public:
  // uint32 status = 4;
  void clear_status() ;
  ::uint32_t status() const;
  void set_status(::uint32_t value);

  private:
  ::uint32_t _internal_status() const;
  void _internal_set_status(::uint32_t value);

  public:
  // int64 init_time = 3;
  void clear_init_time() ;
  ::int64_t init_time() const;
  void set_init_time(::int64_t value);

  private:
  ::int64_t _internal_init_time() const;
  void _internal_set_init_time(::int64_t value);

  public:
  // uint32 index = 5;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:eventinfo.Registry)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr opcode_name_;
    ::google::protobuf::internal::ArenaStringPtr key_name_;
    ::int32_t opcode_;
    ::uint32_t status_;
    ::int64_t init_time_;
    ::uint32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};// -------------------------------------------------------------------

class Process final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventinfo.Process) */ {
 public:
  inline Process() : Process(nullptr) {}
  ~Process() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Process(::google::protobuf::internal::ConstantInitialized);

  inline Process(const Process& from)
      : Process(nullptr, from) {}
  Process(Process&& from) noexcept
    : Process() {
    *this = ::std::move(from);
  }

  inline Process& operator=(const Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline Process& operator=(Process&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Process& default_instance() {
    return *internal_default_instance();
  }
  static inline const Process* internal_default_instance() {
    return reinterpret_cast<const Process*>(
               &_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Process& a, Process& b) {
    a.Swap(&b);
  }
  inline void Swap(Process* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Process* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Process* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Process>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Process& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Process& from) {
    Process::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Process* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "eventinfo.Process";
  }
  protected:
  explicit Process(::google::protobuf::Arena* arena);
  Process(::google::protobuf::Arena* arena, const Process& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpcodeNameFieldNumber = 2,
    kCmdLineFieldNumber = 5,
    kOpcodeFieldNumber = 1,
    kPidFieldNumber = 3,
    kPpidFieldNumber = 4,
  };
  // string opcode_name = 2;
  void clear_opcode_name() ;
  const std::string& opcode_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_opcode_name(Arg_&& arg, Args_... args);
  std::string* mutable_opcode_name();
  PROTOBUF_NODISCARD std::string* release_opcode_name();
  void set_allocated_opcode_name(std::string* value);

  private:
  const std::string& _internal_opcode_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opcode_name(
      const std::string& value);
  std::string* _internal_mutable_opcode_name();

  public:
  // string cmd_line = 5;
  void clear_cmd_line() ;
  const std::string& cmd_line() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmd_line(Arg_&& arg, Args_... args);
  std::string* mutable_cmd_line();
  PROTOBUF_NODISCARD std::string* release_cmd_line();
  void set_allocated_cmd_line(std::string* value);

  private:
  const std::string& _internal_cmd_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd_line(
      const std::string& value);
  std::string* _internal_mutable_cmd_line();

  public:
  // int32 opcode = 1;
  void clear_opcode() ;
  ::int32_t opcode() const;
  void set_opcode(::int32_t value);

  private:
  ::int32_t _internal_opcode() const;
  void _internal_set_opcode(::int32_t value);

  public:
  // uint32 pid = 3;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // uint32 ppid = 4;
  void clear_ppid() ;
  ::uint32_t ppid() const;
  void set_ppid(::uint32_t value);

  private:
  ::uint32_t _internal_ppid() const;
  void _internal_set_ppid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:eventinfo.Process)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr opcode_name_;
    ::google::protobuf::internal::ArenaStringPtr cmd_line_;
    ::int32_t opcode_;
    ::uint32_t pid_;
    ::uint32_t ppid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};// -------------------------------------------------------------------

class FileIO final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventinfo.FileIO) */ {
 public:
  inline FileIO() : FileIO(nullptr) {}
  ~FileIO() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileIO(::google::protobuf::internal::ConstantInitialized);

  inline FileIO(const FileIO& from)
      : FileIO(nullptr, from) {}
  FileIO(FileIO&& from) noexcept
    : FileIO() {
    *this = ::std::move(from);
  }

  inline FileIO& operator=(const FileIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileIO& operator=(FileIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileIO* internal_default_instance() {
    return reinterpret_cast<const FileIO*>(
               &_FileIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileIO& a, FileIO& b) {
    a.Swap(&b);
  }
  inline void Swap(FileIO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileIO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileIO* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileIO>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileIO& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileIO& from) {
    FileIO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileIO* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "eventinfo.FileIO";
  }
  protected:
  explicit FileIO(::google::protobuf::Arena* arena);
  FileIO(::google::protobuf::Arena* arena, const FileIO& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpcodeNameFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kOpcodeFieldNumber = 1,
  };
  // string opcode_name = 2;
  void clear_opcode_name() ;
  const std::string& opcode_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_opcode_name(Arg_&& arg, Args_... args);
  std::string* mutable_opcode_name();
  PROTOBUF_NODISCARD std::string* release_opcode_name();
  void set_allocated_opcode_name(std::string* value);

  private:
  const std::string& _internal_opcode_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opcode_name(
      const std::string& value);
  std::string* _internal_mutable_opcode_name();

  public:
  // string filename = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int32 opcode = 1;
  void clear_opcode() ;
  ::int32_t opcode() const;
  void set_opcode(::int32_t value);

  private:
  ::int32_t _internal_opcode() const;
  void _internal_set_opcode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:eventinfo.FileIO)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr opcode_name_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int32_t opcode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Process

// int32 opcode = 1;
inline void Process::clear_opcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_ = 0;
}
inline ::int32_t Process::opcode() const {
  // @@protoc_insertion_point(field_get:eventinfo.Process.opcode)
  return _internal_opcode();
}
inline void Process::set_opcode(::int32_t value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:eventinfo.Process.opcode)
}
inline ::int32_t Process::_internal_opcode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_;
}
inline void Process::_internal_set_opcode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_ = value;
}

// string opcode_name = 2;
inline void Process::clear_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_name_.ClearToEmpty();
}
inline const std::string& Process::opcode_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.Process.opcode_name)
  return _internal_opcode_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Process::set_opcode_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.Process.opcode_name)
}
inline std::string* Process::mutable_opcode_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_opcode_name();
  // @@protoc_insertion_point(field_mutable:eventinfo.Process.opcode_name)
  return _s;
}
inline const std::string& Process::_internal_opcode_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_name_.Get();
}
inline void Process::_internal_set_opcode_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_name_.Set(value, GetArena());
}
inline std::string* Process::_internal_mutable_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.opcode_name_.Mutable( GetArena());
}
inline std::string* Process::release_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.Process.opcode_name)
  return _impl_.opcode_name_.Release();
}
inline void Process::set_allocated_opcode_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.opcode_name_.IsDefault()) {
          _impl_.opcode_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.Process.opcode_name)
}

// uint32 pid = 3;
inline void Process::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0u;
}
inline ::uint32_t Process::pid() const {
  // @@protoc_insertion_point(field_get:eventinfo.Process.pid)
  return _internal_pid();
}
inline void Process::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:eventinfo.Process.pid)
}
inline ::uint32_t Process::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void Process::_internal_set_pid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// uint32 ppid = 4;
inline void Process::clear_ppid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ppid_ = 0u;
}
inline ::uint32_t Process::ppid() const {
  // @@protoc_insertion_point(field_get:eventinfo.Process.ppid)
  return _internal_ppid();
}
inline void Process::set_ppid(::uint32_t value) {
  _internal_set_ppid(value);
  // @@protoc_insertion_point(field_set:eventinfo.Process.ppid)
}
inline ::uint32_t Process::_internal_ppid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ppid_;
}
inline void Process::_internal_set_ppid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ppid_ = value;
}

// string cmd_line = 5;
inline void Process::clear_cmd_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_line_.ClearToEmpty();
}
inline const std::string& Process::cmd_line() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.Process.cmd_line)
  return _internal_cmd_line();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Process::set_cmd_line(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cmd_line_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.Process.cmd_line)
}
inline std::string* Process::mutable_cmd_line() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cmd_line();
  // @@protoc_insertion_point(field_mutable:eventinfo.Process.cmd_line)
  return _s;
}
inline const std::string& Process::_internal_cmd_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cmd_line_.Get();
}
inline void Process::_internal_set_cmd_line(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cmd_line_.Set(value, GetArena());
}
inline std::string* Process::_internal_mutable_cmd_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cmd_line_.Mutable( GetArena());
}
inline std::string* Process::release_cmd_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.Process.cmd_line)
  return _impl_.cmd_line_.Release();
}
inline void Process::set_allocated_cmd_line(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cmd_line_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmd_line_.IsDefault()) {
          _impl_.cmd_line_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.Process.cmd_line)
}

// -------------------------------------------------------------------

// FileIO

// int32 opcode = 1;
inline void FileIO::clear_opcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_ = 0;
}
inline ::int32_t FileIO::opcode() const {
  // @@protoc_insertion_point(field_get:eventinfo.FileIO.opcode)
  return _internal_opcode();
}
inline void FileIO::set_opcode(::int32_t value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:eventinfo.FileIO.opcode)
}
inline ::int32_t FileIO::_internal_opcode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_;
}
inline void FileIO::_internal_set_opcode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_ = value;
}

// string opcode_name = 2;
inline void FileIO::clear_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_name_.ClearToEmpty();
}
inline const std::string& FileIO::opcode_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.FileIO.opcode_name)
  return _internal_opcode_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileIO::set_opcode_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.FileIO.opcode_name)
}
inline std::string* FileIO::mutable_opcode_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_opcode_name();
  // @@protoc_insertion_point(field_mutable:eventinfo.FileIO.opcode_name)
  return _s;
}
inline const std::string& FileIO::_internal_opcode_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_name_.Get();
}
inline void FileIO::_internal_set_opcode_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_name_.Set(value, GetArena());
}
inline std::string* FileIO::_internal_mutable_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.opcode_name_.Mutable( GetArena());
}
inline std::string* FileIO::release_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.FileIO.opcode_name)
  return _impl_.opcode_name_.Release();
}
inline void FileIO::set_allocated_opcode_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.opcode_name_.IsDefault()) {
          _impl_.opcode_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.FileIO.opcode_name)
}

// string filename = 3;
inline void FileIO::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileIO::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.FileIO.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileIO::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.FileIO.filename)
}
inline std::string* FileIO::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:eventinfo.FileIO.filename)
  return _s;
}
inline const std::string& FileIO::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void FileIO::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileIO::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileIO::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.FileIO.filename)
  return _impl_.filename_.Release();
}
inline void FileIO::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.FileIO.filename)
}

// -------------------------------------------------------------------

// Registry

// int32 opcode = 1;
inline void Registry::clear_opcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_ = 0;
}
inline ::int32_t Registry::opcode() const {
  // @@protoc_insertion_point(field_get:eventinfo.Registry.opcode)
  return _internal_opcode();
}
inline void Registry::set_opcode(::int32_t value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:eventinfo.Registry.opcode)
}
inline ::int32_t Registry::_internal_opcode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_;
}
inline void Registry::_internal_set_opcode(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_ = value;
}

// string opcode_name = 2;
inline void Registry::clear_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_name_.ClearToEmpty();
}
inline const std::string& Registry::opcode_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.Registry.opcode_name)
  return _internal_opcode_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registry::set_opcode_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.Registry.opcode_name)
}
inline std::string* Registry::mutable_opcode_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_opcode_name();
  // @@protoc_insertion_point(field_mutable:eventinfo.Registry.opcode_name)
  return _s;
}
inline const std::string& Registry::_internal_opcode_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_name_.Get();
}
inline void Registry::_internal_set_opcode_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_name_.Set(value, GetArena());
}
inline std::string* Registry::_internal_mutable_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.opcode_name_.Mutable( GetArena());
}
inline std::string* Registry::release_opcode_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.Registry.opcode_name)
  return _impl_.opcode_name_.Release();
}
inline void Registry::set_allocated_opcode_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.opcode_name_.IsDefault()) {
          _impl_.opcode_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.Registry.opcode_name)
}

// int64 init_time = 3;
inline void Registry::clear_init_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.init_time_ = ::int64_t{0};
}
inline ::int64_t Registry::init_time() const {
  // @@protoc_insertion_point(field_get:eventinfo.Registry.init_time)
  return _internal_init_time();
}
inline void Registry::set_init_time(::int64_t value) {
  _internal_set_init_time(value);
  // @@protoc_insertion_point(field_set:eventinfo.Registry.init_time)
}
inline ::int64_t Registry::_internal_init_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.init_time_;
}
inline void Registry::_internal_set_init_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.init_time_ = value;
}

// uint32 status = 4;
inline void Registry::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0u;
}
inline ::uint32_t Registry::status() const {
  // @@protoc_insertion_point(field_get:eventinfo.Registry.status)
  return _internal_status();
}
inline void Registry::set_status(::uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:eventinfo.Registry.status)
}
inline ::uint32_t Registry::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void Registry::_internal_set_status(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// uint32 index = 5;
inline void Registry::clear_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.index_ = 0u;
}
inline ::uint32_t Registry::index() const {
  // @@protoc_insertion_point(field_get:eventinfo.Registry.index)
  return _internal_index();
}
inline void Registry::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:eventinfo.Registry.index)
}
inline ::uint32_t Registry::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void Registry::_internal_set_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// string key_name = 6;
inline void Registry::clear_key_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_name_.ClearToEmpty();
}
inline const std::string& Registry::key_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.Registry.key_name)
  return _internal_key_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Registry::set_key_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.Registry.key_name)
}
inline std::string* Registry::mutable_key_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_name();
  // @@protoc_insertion_point(field_mutable:eventinfo.Registry.key_name)
  return _s;
}
inline const std::string& Registry::_internal_key_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_name_.Get();
}
inline void Registry::_internal_set_key_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_name_.Set(value, GetArena());
}
inline std::string* Registry::_internal_mutable_key_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_name_.Mutable( GetArena());
}
inline std::string* Registry::release_key_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.Registry.key_name)
  return _impl_.key_name_.Release();
}
inline void Registry::set_allocated_key_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_name_.IsDefault()) {
          _impl_.key_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.Registry.key_name)
}

// -------------------------------------------------------------------

// ServerResponse

// string msg = 1;
inline void ServerResponse::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& ServerResponse::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:eventinfo.ServerResponse.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerResponse::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:eventinfo.ServerResponse.msg)
}
inline std::string* ServerResponse::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:eventinfo.ServerResponse.msg)
  return _s;
}
inline const std::string& ServerResponse::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void ServerResponse::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* ServerResponse::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* ServerResponse::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:eventinfo.ServerResponse.msg)
  return _impl_.msg_.Release();
}
inline void ServerResponse::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:eventinfo.ServerResponse.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace eventinfo


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_event_2eproto_2epb_2eh
