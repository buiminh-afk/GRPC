// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: grpc/event_proto/event.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventInfo_ProcessEvent_FullMethodName  = "/eventinfo.EventInfo/ProcessEvent"
	EventInfo_FileIoEvent_FullMethodName   = "/eventinfo.EventInfo/FileIoEvent"
	EventInfo_RegistryEvent_FullMethodName = "/eventinfo.EventInfo/RegistryEvent"
)

// EventInfoClient is the client API for EventInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventInfoClient interface {
	ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Process, ServerResponse], error)
	FileIoEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileIO, ServerResponse], error)
	RegistryEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Registry, ServerResponse], error)
}

type eventInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewEventInfoClient(cc grpc.ClientConnInterface) EventInfoClient {
	return &eventInfoClient{cc}
}

func (c *eventInfoClient) ProcessEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Process, ServerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventInfo_ServiceDesc.Streams[0], EventInfo_ProcessEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Process, ServerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventInfo_ProcessEventClient = grpc.ClientStreamingClient[Process, ServerResponse]

func (c *eventInfoClient) FileIoEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileIO, ServerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventInfo_ServiceDesc.Streams[1], EventInfo_FileIoEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileIO, ServerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventInfo_FileIoEventClient = grpc.ClientStreamingClient[FileIO, ServerResponse]

func (c *eventInfoClient) RegistryEvent(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Registry, ServerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventInfo_ServiceDesc.Streams[2], EventInfo_RegistryEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Registry, ServerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventInfo_RegistryEventClient = grpc.ClientStreamingClient[Registry, ServerResponse]

// EventInfoServer is the server API for EventInfo service.
// All implementations must embed UnimplementedEventInfoServer
// for forward compatibility.
type EventInfoServer interface {
	ProcessEvent(grpc.ClientStreamingServer[Process, ServerResponse]) error
	FileIoEvent(grpc.ClientStreamingServer[FileIO, ServerResponse]) error
	RegistryEvent(grpc.ClientStreamingServer[Registry, ServerResponse]) error
	mustEmbedUnimplementedEventInfoServer()
}

// UnimplementedEventInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventInfoServer struct{}

func (UnimplementedEventInfoServer) ProcessEvent(grpc.ClientStreamingServer[Process, ServerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedEventInfoServer) FileIoEvent(grpc.ClientStreamingServer[FileIO, ServerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FileIoEvent not implemented")
}
func (UnimplementedEventInfoServer) RegistryEvent(grpc.ClientStreamingServer[Registry, ServerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegistryEvent not implemented")
}
func (UnimplementedEventInfoServer) mustEmbedUnimplementedEventInfoServer() {}
func (UnimplementedEventInfoServer) testEmbeddedByValue()                   {}

// UnsafeEventInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventInfoServer will
// result in compilation errors.
type UnsafeEventInfoServer interface {
	mustEmbedUnimplementedEventInfoServer()
}

func RegisterEventInfoServer(s grpc.ServiceRegistrar, srv EventInfoServer) {
	// If the following call pancis, it indicates UnimplementedEventInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventInfo_ServiceDesc, srv)
}

func _EventInfo_ProcessEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventInfoServer).ProcessEvent(&grpc.GenericServerStream[Process, ServerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventInfo_ProcessEventServer = grpc.ClientStreamingServer[Process, ServerResponse]

func _EventInfo_FileIoEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventInfoServer).FileIoEvent(&grpc.GenericServerStream[FileIO, ServerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventInfo_FileIoEventServer = grpc.ClientStreamingServer[FileIO, ServerResponse]

func _EventInfo_RegistryEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventInfoServer).RegistryEvent(&grpc.GenericServerStream[Registry, ServerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventInfo_RegistryEventServer = grpc.ClientStreamingServer[Registry, ServerResponse]

// EventInfo_ServiceDesc is the grpc.ServiceDesc for EventInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventinfo.EventInfo",
	HandlerType: (*EventInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessEvent",
			Handler:       _EventInfo_ProcessEvent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileIoEvent",
			Handler:       _EventInfo_FileIoEvent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RegistryEvent",
			Handler:       _EventInfo_RegistryEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/event_proto/event.proto",
}
