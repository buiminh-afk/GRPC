// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: grpc/info_proto/info.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemInfo_Processes_FullMethodName = "/sysinfo.SystemInfo/Processes"
)

// SystemInfoClient is the client API for SystemInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemInfoClient interface {
	Processes(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Process, ServerResponse], error)
}

type systemInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemInfoClient(cc grpc.ClientConnInterface) SystemInfoClient {
	return &systemInfoClient{cc}
}

func (c *systemInfoClient) Processes(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Process, ServerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemInfo_ServiceDesc.Streams[0], SystemInfo_Processes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Process, ServerResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemInfo_ProcessesClient = grpc.ClientStreamingClient[Process, ServerResponse]

// SystemInfoServer is the server API for SystemInfo service.
// All implementations must embed UnimplementedSystemInfoServer
// for forward compatibility.
type SystemInfoServer interface {
	Processes(grpc.ClientStreamingServer[Process, ServerResponse]) error
	mustEmbedUnimplementedSystemInfoServer()
}

// UnimplementedSystemInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemInfoServer struct{}

func (UnimplementedSystemInfoServer) Processes(grpc.ClientStreamingServer[Process, ServerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Processes not implemented")
}
func (UnimplementedSystemInfoServer) mustEmbedUnimplementedSystemInfoServer() {}
func (UnimplementedSystemInfoServer) testEmbeddedByValue()                    {}

// UnsafeSystemInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemInfoServer will
// result in compilation errors.
type UnsafeSystemInfoServer interface {
	mustEmbedUnimplementedSystemInfoServer()
}

func RegisterSystemInfoServer(s grpc.ServiceRegistrar, srv SystemInfoServer) {
	// If the following call pancis, it indicates UnimplementedSystemInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemInfo_ServiceDesc, srv)
}

func _SystemInfo_Processes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemInfoServer).Processes(&grpc.GenericServerStream[Process, ServerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemInfo_ProcessesServer = grpc.ClientStreamingServer[Process, ServerResponse]

// SystemInfo_ServiceDesc is the grpc.ServiceDesc for SystemInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysinfo.SystemInfo",
	HandlerType: (*SystemInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Processes",
			Handler:       _SystemInfo_Processes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/info_proto/info.proto",
}
